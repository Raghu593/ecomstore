[{"/Users/raghu/Downloads/ecomstore-master/frontend/src/index.js":"1","/Users/raghu/Downloads/ecomstore-master/frontend/src/App.js":"2","/Users/raghu/Downloads/ecomstore-master/frontend/src/reportWebVitals.js":"3","/Users/raghu/Downloads/ecomstore-master/frontend/src/app/store.js":"4","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/LoginScreen.js":"5","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/CartScreen.js":"6","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/PaymentScreen.js":"7","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/RegisterScreen.js":"8","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/ShippingScreen.js":"9","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/HomeScreen.js":"10","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/UserEditScreen.js":"11","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/PlaceorderScreen.js":"12","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/OrderScreen.js":"13","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/UserListScreen.js":"14","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/ProductEditScreen.js":"15","/Users/raghu/Downloads/ecomstore-master/frontend/src/components/Header.js":"16","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/ProductUploadScreen.js":"17","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/ProductScreen.js":"18","/Users/raghu/Downloads/ecomstore-master/frontend/src/components/Footer.js":"19","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/ProductListScreen.js":"20","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/ProfileScreen.js":"21","/Users/raghu/Downloads/ecomstore-master/frontend/src/app/api.js":"22","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/AllOrders.js":"23","/Users/raghu/Downloads/ecomstore-master/frontend/src/app/features/slices/userSlice.js":"24","/Users/raghu/Downloads/ecomstore-master/frontend/src/app/features/slices/cartslice.js":"25","/Users/raghu/Downloads/ecomstore-master/frontend/src/app/features/slices/productslice.js":"26","/Users/raghu/Downloads/ecomstore-master/frontend/src/components/Product.js":"27","/Users/raghu/Downloads/ecomstore-master/frontend/src/components/Loader.js":"28","/Users/raghu/Downloads/ecomstore-master/frontend/src/components/FormContainer.js":"29","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/Message.js":"30","/Users/raghu/Downloads/ecomstore-master/frontend/src/components/CheckoutSteps.js":"31","/Users/raghu/Downloads/ecomstore-master/frontend/src/components/Rating.js":"32","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/Loader.js":"33","/Users/raghu/Downloads/ecomstore-master/frontend/src/components/brandcolor.js":"34","/Users/raghu/Downloads/ecomstore-master/frontend/src/components/Productcarousal.js":"35"},{"size":823,"mtime":1689157871000,"results":"36","hashOfConfig":"37"},{"size":2229,"mtime":1689157871000,"results":"38","hashOfConfig":"37"},{"size":362,"mtime":1689157871000,"results":"39","hashOfConfig":"37"},{"size":1333,"mtime":1689157871000,"results":"40","hashOfConfig":"37"},{"size":2908,"mtime":1692283042936,"results":"41","hashOfConfig":"37"},{"size":3486,"mtime":1692282915206,"results":"42","hashOfConfig":"37"},{"size":1889,"mtime":1689157871000,"results":"43","hashOfConfig":"37"},{"size":3709,"mtime":1692283120335,"results":"44","hashOfConfig":"37"},{"size":2671,"mtime":1689157871000,"results":"45","hashOfConfig":"37"},{"size":1535,"mtime":1692699407788,"results":"46","hashOfConfig":"37"},{"size":3592,"mtime":1689157871000,"results":"47","hashOfConfig":"37"},{"size":4883,"mtime":1689157871000,"results":"48","hashOfConfig":"37"},{"size":7659,"mtime":1692340083695,"results":"49","hashOfConfig":"37"},{"size":3136,"mtime":1689157871000,"results":"50","hashOfConfig":"37"},{"size":5337,"mtime":1689157871000,"results":"51","hashOfConfig":"37"},{"size":4525,"mtime":1692340798744,"results":"52","hashOfConfig":"37"},{"size":5781,"mtime":1689157871000,"results":"53","hashOfConfig":"37"},{"size":4542,"mtime":1689157871000,"results":"54","hashOfConfig":"37"},{"size":369,"mtime":1689157871000,"results":"55","hashOfConfig":"37"},{"size":3408,"mtime":1689157871000,"results":"56","hashOfConfig":"37"},{"size":6796,"mtime":1692289608103,"results":"57","hashOfConfig":"37"},{"size":7588,"mtime":1689157871000,"results":"58","hashOfConfig":"37"},{"size":4603,"mtime":1689157871000,"results":"59","hashOfConfig":"37"},{"size":315,"mtime":1689157871000,"results":"60","hashOfConfig":"37"},{"size":3096,"mtime":1689157871000,"results":"61","hashOfConfig":"37"},{"size":853,"mtime":1689157871000,"results":"62","hashOfConfig":"37"},{"size":1052,"mtime":1689157871000,"results":"63","hashOfConfig":"37"},{"size":384,"mtime":1689157871000,"results":"64","hashOfConfig":"37"},{"size":330,"mtime":1689157871000,"results":"65","hashOfConfig":"37"},{"size":243,"mtime":1689157871000,"results":"66","hashOfConfig":"37"},{"size":1247,"mtime":1692248783772,"results":"67","hashOfConfig":"37"},{"size":1198,"mtime":1689157871000,"results":"68","hashOfConfig":"37"},{"size":317,"mtime":1689157871000,"results":"69","hashOfConfig":"37"},{"size":33,"mtime":1692252916923,"results":"70","hashOfConfig":"37"},{"size":792,"mtime":1692281021237,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},"1emkdo8",{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"76"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"76"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"76"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"76"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"76"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"76"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/raghu/Downloads/ecomstore-master/frontend/src/index.js",["188"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport {\n    persistStore,\n  } from 'redux-persist'\n\n\n\nlet persistor = persistStore(store)\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <Provider store={store}>\n    {/* <PersistGate loading={null} persistor={persistor}> */}\n    <App />\n    {/* </PersistGate> */}\n    </Provider>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/App.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/reportWebVitals.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/app/store.js",["189"],[],"import { configureStore } from \"@reduxjs/toolkit\";\nimport { setupListeners } from '@reduxjs/toolkit/query'\nimport { api } from \"./api\";\nimport cartReducer from './features/slices/cartslice'\nimport userReducer from '../app/features/slices/userSlice'\nimport productReducer from '../app/features/slices/productslice'\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nconst persistConfig = {\n  key: 'root',\n  version: 1,\n  storage,\n  timeout: 1000,\n  blacklist: [api.reducerPath],\n}\n\nconst persistedReducer = persistReducer(persistConfig, cartReducer)\n\n\nexport const store=configureStore({\n        reducer:{\n            [api.reducerPath]: api.reducer,\n            // cart:cartReducer,\n            cart:persistedReducer,\n            user:userReducer,\n            product:productReducer\n        },\n        middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware({\n          // serializableCheck: false,\n          serializableCheck: {\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n          },\n          immutableCheck: false\n        }).concat(api.middleware)\n        // devTools:false\n        \n})\n\nlet persistor = persistStore(store)\n\nsetupListeners(store.dispatch)","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/LoginScreen.js",["190"],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/CartScreen.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/PaymentScreen.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/RegisterScreen.js",["191","192","193","194"],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/ShippingScreen.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/HomeScreen.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/UserEditScreen.js",["195","196","197","198","199","200","201","202","203","204","205","206","207","208"],[],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from './Message'\nimport Loader from '../components/Loader'\nimport FormContainer from '../components/FormContainer'\nimport { useGetUserByIdQuery,useUpdateUserByIdMutation } from '../app/api'\nimport { useNavigate ,useParams} from 'react-router-dom';\nimport { skipToken } from '@reduxjs/toolkit/dist/query'\n\n\nconst UserEditScreen = () => {\n\n  const params=useParams();\n  let id=params.id\n\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  const [isAdmin, setIsAdmin] = useState(false)\n  const [skip, setskip] = useState(true)\n\n  const navigate = useNavigate();\n\n  const submitHandler = async (e) => {\n    e.preventDefault()\n    const formData={name,email,id,isAdmin}\n    // console.log(formData)\n    await updateUser(formData);\n    }\n\n\n  const {data,isLoading,isFetching,error,isError,isSuccess,refetch}=useGetUserByIdQuery(id,{\n    skip,\n  });\n  const [updateUser,updateUserResponse]=useUpdateUserByIdMutation();\n\n//  console.log(updateUserResponse.isSuccess)\n\n  useEffect(() => {\n    setskip(false)\n    if(isSuccess){\n      setName(data.name)\n      setEmail(data.email)\n      setIsAdmin(data.isAdmin)\n    }\n    // if(updateUserResponse.isSuccess){\n    //   // setskip(true)\n    //   // refetch()      \n    //   navigate('/admin/userlist')\n    // }\n  }, [isSuccess])\n\n\n  // const {data,isLoading,error}=useGetProfileQuery();\n    //  const [getUser,getUserResponse]=useGetUserByIdQuery();\n  //  console.log(getUser)\n\n// if(isSuccess){\n//       console.log(\"data\",data)\n//  }\n   \n    let userInfo;\n  \n\n\n\n  return (\n    <>\n     {/* {error && <Message variant='danger'>{error}</Message>} */}\n      {/* <Message>Hello</Message> */}\n      {/* {isLoading && <Loader />} */}\n      {/* {isSuccess &&  */}\n      <>\n      <Link to='/admin/userlist' className='btn btn-light my-3'>\n        Go Back\n      </Link>\n      <FormContainer>\n        <h1>Edit User</h1>\n        {/* {isLoading && <Loader />} */}\n        {/* {error && <Message variant='danger'>{error}</Message>} */}\n        {/* {isLoading ? (\n          <Loader />\n        ) : error ? (\n          <Message variant='danger'>{error.data}</Message>\n        ) : ( */}\n          <Form onSubmit={submitHandler}>\n            <Form.Group controlId='name'>\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type='name'\n                placeholder='Enter name'\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='email'>\n              <Form.Label>Email Address</Form.Label>\n              <Form.Control\n                type='email'\n                placeholder='Enter email'\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='isadmin'>\n              <Form.Check\n                type='checkbox'\n                label='Is Admin'\n                checked={isAdmin}\n                onChange={(e) => setIsAdmin(e.target.checked)}\n              ></Form.Check>\n            </Form.Group>\n\n            <Button type='submit' variant='primary' onClick={submitHandler}>\n              Update\n            </Button>\n          </Form>\n        {/* )} */}\n      </FormContainer>\n      </>\n{/* } */}\n    </>\n  )\n}\n\nexport default UserEditScreen","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/PlaceorderScreen.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/OrderScreen.js",["209","210","211","212"],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/UserListScreen.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/ProductEditScreen.js",["213","214","215","216"],[],"import React,{useState,useEffect} from 'react'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\nimport { Form, Button} from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport FormContainer from '../components/FormContainer'\nimport { useNavigate ,useParams} from 'react-router-dom';\nimport { useGetProductByIdQuery , useUpdateProductMutation} from '../app/api'\n\nconst ProductEditScreen=()=> {\n\n  const params=useParams();\n  let id=params.id\n\n  console.log(id)\n\n    const [name, setName] = useState('')\n  const [price, setPrice] = useState(0)\n  const [image, setImage] = useState('')\n  const [brand, setBrand] = useState('')\n  const [category, setCategory] = useState('')\n  const [countInStock, setCountInStock] = useState(0)\n  const [description, setDescription] = useState('')\n  const [skip, setskip] = useState(true)\n  const [uploading, setUploading] = useState(false)\n\n  const {data,isLoading,isSuccess}=useGetProductByIdQuery(id,{\n    skip\n  });\n\n  const [updateProduct,updateProductResponse]=useUpdateProductMutation();\n\n  const submitHandler = async (e) => {\n    e.preventDefault()\n    const formData={name,price,image,brand,category,countInStock,description,id}\n    // console.log(formData)\n    await updateProduct(formData);\n    }\n\n    const uploadFileHandler = async (e) => {\n      const file=e.target.files[0]\n      console.log(\"file\",file)\n      const formData=new FormData()\n      formData.append('image',file)\n      setUploading(true)\n        try {\n          const config = {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n            },\n          }\n\n          const { data } = await axios.post('/api/upload', formData, config)\n          setImage(data)\n          //  await uploadImage(file) \n          //  setImage(uploadImageResponse.data)\n           setUploading(false)\n        } catch (error) {\n            console.error(error)\n            setUploading(false)\n        }\n    }\n\n    useEffect(() => {\n      setskip(false)\n      if(isSuccess){\n        setName(data.name)\n        setPrice(data.price)\n        setImage(data.image)\n        setBrand(data.brand)\n        setCategory(data.category)\n        setCountInStock(data.countInStock)\n        setDescription(data.description)\n      }\n     \n    }, [isSuccess])\n\n  return (\n    <>\n    <Link to='/admin/productlist' className='btn btn-light my-3'>\n      Go Back\n    </Link>\n    <FormContainer>\n      <h1>Edit Product</h1>\n      {/* {loadingUpdate && <Loader />} */}\n      {/* {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>} */}\n      {/* {loading ? ( */}\n        {/* <Loader /> */}\n      {/* ) : error ? ( */}\n        {/* <Message variant='danger'>{error}</Message> */}\n      {/* ) : ( */}\n        <Form onSubmit={submitHandler}>\n          <Form.Group>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type='name'\n              placeholder='Enter name'\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Price</Form.Label>\n            <Form.Control\n              type='number'\n              placeholder='Enter price'\n              value={price}\n              onChange={(e) => setPrice(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Image</Form.Label>\n            <Form.Control\n              type='text'\n              placeholder='Enter image url'\n              value={image}\n              onChange={(e) => setImage(e.target.value)}\n            ></Form.Control>\n            <Form.Control\n              type='file'\n              id='image-file'\n              label='Choose File'\n              onChange={uploadFileHandler}\n            ></Form.Control>\n            {uploading && <Loader />}\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Brand</Form.Label>\n            <Form.Control\n              type='text'\n              placeholder='Enter brand'\n              value={brand}\n              onChange={(e) => setBrand(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Count In Stock</Form.Label>\n            <Form.Control\n              type='number'\n              placeholder='Enter countInStock'\n              value={countInStock}\n              onChange={(e) => setCountInStock(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Category</Form.Label>\n            <Form.Control\n              type='text'\n              placeholder='Enter category'\n              value={category}\n              onChange={(e) => setCategory(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Description</Form.Label>\n            <Form.Control\n              type='text'\n              placeholder='Enter description'\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Button type='submit' variant='primary'>\n            Update\n          </Button>\n        </Form>\n      {/* )} */}\n    </FormContainer>\n  </>  \n  )\n}\n\nexport default ProductEditScreen","/Users/raghu/Downloads/ecomstore-master/frontend/src/components/Header.js",["217","218"],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/ProductUploadScreen.js",["219","220","221","222","223","224","225"],[],"import React,{useState,useEffect} from 'react'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Container} from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport FormContainer from '../components/FormContainer'\nimport { useNavigate ,useParams} from 'react-router-dom';\nimport { useCreateProductMutation, useUploadMutation} from '../app/api'\n\nconst ProductUploadScreen=()=> {\n\n  const [name, setName] = useState('')\n  const [price, setPrice] = useState(0)\n  const [image, setImage] = useState('')\n  const [brand, setBrand] = useState('')\n  const [category, setCategory] = useState('')\n  const [countInStock, setCountInStock] = useState(0)\n  const [description, setDescription] = useState('')\n  const [uploading, setUploading] = useState(false)\n\n\n  const [uploadProduct,uploadProductResponse]=useCreateProductMutation();\n\n  const[uploadImage,uploadImageResponse]=useUploadMutation()\n\n  const submitHandler = async (e) => {\n    e.preventDefault()\n    const formData={name,price,image,brand,category,countInStock,description}\n    console.log(formData)\n    await uploadProduct(formData);\n    }\n\n        //  const uploadFileHandler = async (e) => {\n        //     setImage(e.target.files[0])\n        //     console.log(\"image\",image)\n        //  }\n\n\n\n     const uploadFileHandler = async (e) => {\n        const file=e.target.files[0]\n        console.log(\"file\",file)\n        const formData=new FormData()\n        formData.append('image',file)\n        setUploading(true)\n          try {\n            const config = {\n              headers: {\n                'Content-Type': 'multipart/form-data',\n              },\n            }\n\n            const { data } = await axios.post('/api/upload', formData, config)\n            setImage(data)\n             await uploadImage(file) \n            //  setImage(uploadImageResponse.data)\n             setUploading(false)\n          } catch (error) {\n              console.error(error)\n              setUploading(false)\n          }\n      }\n\n      if(uploadImageResponse.isError){\n        console.log('error',uploadImageResponse.error)\n      }\n\n      if(uploadImageResponse.isSuccess){\n        console.log('data',uploadImageResponse.data)\n      }\n\n    // useEffect(() => {\n    //   setskip(false)\n    //   if(isSuccess){\n    //     setName(data.name)\n    //     setPrice(data.price)\n    //     setImage(data.image)\n    //     setBrand(data.brand)\n    //     setCategory(data.category)\n    //     setCountInStock(data.countInStock)\n    //     setDescription(data.description)\n    //   }\n     \n    // }, [isSuccess])\n\n  return (\n    <>\n    <Link to='/admin/productlist' className='btn btn-light my-3'>\n      Go Back\n    </Link>\n    <Container>\n      <h1>Upload Product</h1>\n      {/* {loadingUpdate && <Loader />} */}\n      {/* {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>} */}\n      {/* {loading ? ( */}\n        {/* <Loader /> */}\n      {/* ) : error ? ( */}\n        {/* <Message variant='danger'>{error}</Message> */}\n      {/* ) : ( */}\n        <Form onSubmit={submitHandler} encType=\"multipart/form-data\">\n          <Form.Group>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type='name'\n              placeholder='Enter name'\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Price</Form.Label>\n            <Form.Control\n              type='number'\n              placeholder='Enter price'\n              value={price}\n              onChange={(e) => setPrice(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Image</Form.Label>\n            <Form.Control\n              type='text'\n              placeholder='Enter image url'\n              value={image}\n              onChange={(e) => setImage(e.target.value)}\n            ></Form.Control>\n            <Form.Control\n              type='file'\n              id='image-file'\n              label='Choose File'\n              onChange={uploadFileHandler}\n            ></Form.Control>\n            {/* <input type='file' onChange={uploadFileHandler} accept='.png, .jpg , .jpeg'/> */}\n            {/* {uploading && <Loader />} */}\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Brand</Form.Label>\n            <Form.Control\n              type='text'\n              placeholder='Enter brand'\n              value={brand}\n              onChange={(e) => setBrand(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Count In Stock</Form.Label>\n            <Form.Control\n              type='number'\n              placeholder='Enter countInStock'\n              value={countInStock}\n              onChange={(e) => setCountInStock(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Category</Form.Label>\n            <Form.Control\n              type='text'\n              placeholder='Enter category'\n              value={category}\n              onChange={(e) => setCategory(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Description</Form.Label>\n            <Form.Control\n              type='text'\n              placeholder='Enter description'\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Button type='submit' variant='primary'>\n            Upload\n          </Button>\n        </Form>\n      {/* )} */}\n    </Container>\n  </>  \n  )\n}\n\nexport default ProductUploadScreen","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/ProductScreen.js",["226"],[],"import {useState} from 'react';\nimport { addToCart } from '../app/features/slices/cartslice';\nimport { useDispatch} from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport {Row, Col,Image,ListGroup,Card,Button, Container ,Form} from 'react-bootstrap';\nimport Rating from '../components/Rating';\nimport { useParams } from 'react-router-dom';\nimport { useGetProductByIdQuery } from '../app/api';\nimport Loader from '../components/Loader';\n\nconst ProductScreen = () => {\n    const params=useParams();\n    const navigate=useNavigate();\n    const dispatch=useDispatch();\n\n    const [qty,setQty]=useState(1)\n    // const[product,setProduct]=useState({});\n\n    const {data,isLoading,isSuccess}=useGetProductByIdQuery(params.id);\n\n    // {isSuccess && }\n    \n    let item=[]\n    if(isSuccess){\n         item.push(data)\n    }\n\n    // setProduct(item)\n\n    // useEffect(()=>{\n    //     const fetchProduct=async()=>{\n    //         const {data}=await axios.get(`/api/products/${params.id}`)\n    //         setProduct(data);\n    //     }\n    //     fetchProduct();\n    // },[])\n    console.log(\"item\")\n    const addToCartHandler=(name,product,image,price,countInStock)=>{\n        // navigate(`/cart/${params.id}?qty=${qty}`)\n        dispatch(addToCart({\n            qty:qty,\n            name:name,\n            product:product,\n            image:image,\n            price:price,\n            countInStock:countInStock,\n            itemsmultiliedbyqty:null\n        }))\n    }\n\n    // const product=products.find(p=> p._id===params.id)\n  return (\n    <Container>\n\n    {\n      isLoading && \n      <Loader/>\n    }\n\n    {isSuccess && \n    \nitem.map(product=>(\n    <div  key={product._id}>\n    <Link className='btn btn-light my-3' to='/'>Go Back</Link>\n      <Row>\n        <Col md={6}>\n            <Image src={product.image} alt={product.name} fluid/>\n        </Col>\n        <Col>\n        <ListGroup variant='flush'>\n            <ListGroup.Item>\n                <h3>{product.name}</h3>\n            </ListGroup.Item>\n            <ListGroup.Item>\n                <Rating value={product.rating} text={`${product.numReviews} Reviews`}/>\n            </ListGroup.Item>\n            <ListGroup.Item>\n                Price: ₹ {product.price}\n            </ListGroup.Item>\n            <ListGroup.Item>\n                Description:{product.description}\n            </ListGroup.Item>\n        </ListGroup>\n        </Col>\n        <Col md={3}>\n            <Card>\n                <ListGroup>\n                    <ListGroup.Item>\n                        <Row>\n                            <Col>\n                            Price:\n                            </Col>\n                            <Col>\n                            <strong>₹ {product.price}</strong>\n                            </Col>\n                        </Row>\n                    </ListGroup.Item>\n                    <ListGroup.Item>\n                        <Row>\n                            <Col>\n                            Status:\n                            </Col>\n                            <Col>\n                            {product.countInStock?'In Stock':'Out Of Stock'}\n                            </Col>\n                        </Row>\n                    </ListGroup.Item>\n                    {product.countInStock>0 && (\n                    <ListGroup.Item>    \n                        <Row>\n                            <Col>Select Qty</Col>\n                            <Col>\n                            <Form.Control as='select' value={qty} onChange={(e)=>setQty(e.target.value)}>\n                            {\n                            [...Array(product.countInStock).keys()].map((x)=>(\n                            <option key={x+1} value={x+1}>\n                            {x+1}\n                            </option>\n                            ))\n                            }\n                            </Form.Control> \n                            </Col>\n                        </Row>\n                    </ListGroup.Item>\n\n\n                    )}\n                    \n                    <ListGroup.Item>\n                        <Button className='btn block' type='button' disabled={product.countInStock===0} onClick={()=>addToCartHandler(product.name,product._id,product.image,product.price,product.countInStock)}>Add To Cart</Button>\n                    </ListGroup.Item>\n                </ListGroup>\n            </Card>\n        </Col>\n      </Row>\n      </div>\n))\n    \n}\n    </Container>\n  )\n}\n\nexport default ProductScreen","/Users/raghu/Downloads/ecomstore-master/frontend/src/components/Footer.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/ProductListScreen.js",["227","228"],[],"import React from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button, Container,Row,Col} from 'react-bootstrap'\nimport Message from './Message'\nimport Loader from '../components/Loader'\nimport { useGetAllProductsQuery ,useDeleteProductMutation} from '../app/api'\nimport { useNavigate } from 'react-router-dom';\n\n\nconst ProductListScreen = () => {\n//   const dispatch = useDispatch()\n\n//   const userList = useSelector((state) => state.userList)\n//   const { loading, error, users } = userList\n\n//   const userLogin = useSelector((state) => state.userLogin)\n//   const { userInfo } = userLogin\n\n//   const userDelete = useSelector((state) => state.userDelete)\n//   const { success: successDelete } = userDelete\n\n//   useEffect(() => {\n//     if (userInfo && userInfo.isAdmin) {\n//       dispatch(listUsers())\n//     } else {\n//       history.push('/login')\n//     }\n//   }, [dispatch, history, successDelete, userInfo])\n\n  const deleteHandler = (id) => {\n    if (window.confirm('Are you sure to delete this product')) {\n        console.log(id)\n      deleteProduct(id)\n    }\n  }\n\n  const navigate = useNavigate();\n\n  // const editHandler=(id)=>{\n  //                   console.log(\"userid\",id)\n  // }``\n\n  const createProductHandler = () => {\n    navigate('/admin/product/upload')\n  }\n\n  const {data,isLoading,isSuccess,refetch,error}=useGetAllProductsQuery();\n// error & console.log(\"allproducts\",error)\nconst [deleteProduct,deleteProductResponse]=useDeleteProductMutation();\n\ndeleteProductResponse.isSuccess && refetch()\n\nreturn (\n    <Container>\n      <Row className='align-items-center'>\n        <Col>\n          <h1>Products</h1>\n        </Col>\n        <Col className='text-right'>\n          <Button className='my-3' onClick={createProductHandler}>\n            <i className='fas fa-plus'></i> Create Product\n          </Button>\n        </Col>\n      </Row>     \n       {isLoading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant='danger'>{error.message}</Message>\n      ) : (\n        <Table striped bordered hover responsive className='table-sm'>\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>NAME</th>\n              <th>PRICE</th>\n              <th>CATEGORY</th>\n              <th>BRAND</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.map((user) => (\n              <tr key={user._id}>\n                <td>{user._id}</td>\n                <td>{user.name}</td>\n                <td>\n                  <a>{user.price}</a>\n                </td>\n                <td>\n                  {user.category}\n                </td>\n                <td>\n                  {user.brand}\n                </td>\n                <td>\n                  <LinkContainer to={`/admin/product/${user._id}/edit`}>\n                    <Button variant='light' className='btn-sm'>\n                      <i className='fas fa-edit'></i>\n                    </Button>\n                  </LinkContainer>\n                  <Button\n                    variant='danger'\n                    className='btn-sm'\n                    onClick={() => deleteHandler(user._id)}\n                  >\n                    <i className='fas fa-trash'></i>\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </Container>\n  )\n}\n\nexport default ProductListScreen","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/ProfileScreen.js",["229","230"],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/app/api.js",["231"],[],"// Need to use the React-specific entry point to import createApi\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n// Define a service using a base URL and expected endpoints\nexport const api = createApi({\n  reducerPath: 'api',\n\n  baseQuery: fetchBaseQuery({ \n  prepareHeaders: (headers, { getState }) => {\n    const userInfo=JSON.parse(localStorage.getItem('userInfo'))\n    // If we have a token set in state, let's assume that we should be passing it.\n    if (userInfo!==null) {\n      headers.set('Authorization', `Bearer ${userInfo.token}`)\n    }\n    // console.log(\"logingheaders\",headers)\n    return headers \n  }\n}),\n  tagTypes:['EditUserDetails','EditProductDetails'],\n  // refetchOnFocus: true,\n  endpoints: (builder) => ({\n    //Auth end points\n    loginUser:builder.mutation({\n      query:(formData)=>{\n        return{\n          url:'api/users/login',\n          method:'POST',\n          body:formData,\n          headers:{\n            'Content-type':'application/json',\n          }\n        }\n      }\n    }),\n    registerUser:builder.mutation({\n      query:(formData)=>{\n        return{\n          url:'api/users',\n          method:'POST',\n          body:formData,\n          headers:{\n            'Content-type':'application/json',\n          }\n      }\n    }\n    }),\n    //Profile End Points\n    getProfile:builder.query({\n        query:(formData)=>{\n          return{\n            url:`api/users/profile`,\n            method:'GET',\n            headers:{\n              'Content-type':'application/json',\n            }\n          }\n        }\n    }),\n    updateProfile:builder.mutation({\n      query:(formData)=>{\n        return{\n          url:`api/users/profile`,\n          method:'PUT',\n          body:formData,\n          headers:{\n            'Content-type':'application/json',\n          }\n        }\n      }\n  }),\n    //Products end points\n    getAllProducts:builder.query({\n      query:()=>{\n        return{\n          url:'/api/products',\n          method:'GET'\n        }\n      },\n      providesTags:['EditProductDetails']\n    }),\n    getProductById:builder.query({\n      query:(id)=>{\n        return{\n          url:`/api/products/${id}`,\n          method:'GET'\n        }\n      },\n      providesTags:['EditProductDetails']\n    }),\n    createProduct:builder.mutation({\n      query:(id)=>{\n        return{\n          url:`/api/products`,\n          method:'POST'\n        }\n      }\n    }),\n    createProductReviews:builder.mutation({\n      query:(body)=>{\n        return{\n          url:`{{URL}}/api/products/${body.id}/reviews`,\n          method:'POST'\n        }\n      }\n    }),\n    //Orders end points\n    createOrder:builder.mutation({\n      query:(orderData)=>{\n        console.log(orderData,\"data\")\n        return{\n          url:`/api/orders`,\n          method:'POST',\n          body:orderData,\n          headers:{\n            'Content-type':'application/json',\n          }\n        }\n      }\n    }),\n    getOrderById:builder.query({     \n      query:(id)=>{\n        return{\n          url:`/api/orders/${id}`,\n          method:'GET'\n        }\n      }\n    }),\n    getMyOrders:builder.query({\n      query:()=>{\n          return{\n            url:`/api/orders/myorders`,\n            method:'GET',\n          }\n      },\n      provideTags:['Refetchorders']\n    }),\n    getAllOrders:builder.query({\n      query:()=>{\n        return{\n          url:`/api/orders`,\n          method:'GET'\n        }\n      }\n    }),\n    //Payment End Points\n    initiatePayment:builder.mutation({\n      query:(data)=>{       \n        console.log(\"sending this data\",data) \n        return{\n          url:`/api/payment/initiatepayment`,\n          method:'POST',\n          body:data,\n          headers:{\n            'Content-type':'application/json',\n          }\n        }\n      }\n    }),\n    verifyPayment:builder.mutation({\n      query:(response)=>{\n        return{\n          url:`/api/payment/verifypayment`,\n          method:'POST',\n          body:response,\n          headers:{\n            'Content-type':'application/json',\n          }\n        }\n      }\n  }),\n    updateOrderToPaid:builder.mutation({      //pass in id,payment result coming from paypal or razor pay gateway of choice\n      query:(id)=>{\n        return{\n          url:`/api/orders/${id}/pay`,\n          method:'PUT',\n          headers:{\n            'Content-type':'application/json',\n          }\n        }\n      }\n    }),\n    updateOrderToDeliver:builder.mutation({      //pass in id,payment result coming from paypal or razor pay gateway of choice\n      query:(id)=>{\n        return{\n          url:`/api/orders/${id}/deliver`,\n          method:'PUT',\n          headers:{\n            'Content-type':'application/json',\n          }\n        }\n      }\n    }),\n  //admin end points\n   getUsers:builder.query({\n    query:()=>{\n      return{\n        url:`/api/users`,\n        method:'GET',\n      }\n    },\n    providesTags:['EditUserDetails']\n   }),\n   getUserById:builder.query({\n    query:(id)=>{\n      return{\n        url:`/api/users/${id}`,\n        method:'GET',\n      }\n    },\n    providesTags:['EditUserDetails']\n   }),\n   updateUserById:builder.mutation({\n    query:(formData)=>{\n          console.log(\"logingheaders\",formData)\n      return{\n        url:`/api/users/${formData.id}`,\n        method:'PUT',\n        body:{\n            \"name\":formData.name,\n            \"email\":formData.email,\n            \"isAdmin\":`${formData.isAdmin}`\n        }\n      }   \n    },\n    invalidatesTags:['EditUserDetails']\n   }),\n   deleteUser:builder.mutation({\n    query:(id)=>{\n      return{\n        url:`/api/users/${id}`,\n        method:'DELETE',\n      }\n    }\n   }),\n   deleteProduct:builder.mutation({\n    query:(id)=>{\n      return{\n        url:`/api/products/${id}`,\n        method:'DELETE',\n      }\n    }\n   }),\n   createProduct:builder.mutation({\n    query:(formData)=>{\n      return{\n        url:`/api/products`,\n        method:'POST',\n        body:formData\n      }\n    },\n    // invalidatesTags:['EditProductDetails']\n  }),\n  updateProduct:builder.mutation({\n    query:(formData)=>{\n      console.log(formData.id)\n      return{\n        url:`/api/products/${formData.id}`,\n        method:'PUT',\n        body:formData\n      }\n    },\n    invalidatesTags:['EditProductDetails']\n  }),\n  upload:builder.mutation({\n    query:(formData)=>{\n      console.log(\"api.js triggered\",formData)\n      return{\n        url:`/api/upload`,\n        method:'POST',\n        body:formData,\n        headers:{\n          'Content-type':'multipart/form-data boundary=MyBoundary'\n        }\n      }\n    }\n  })\n  })\n})\n\n// Export hooks for usage in functional components, which are\n// auto-generated based on the defined endpoints\nexport const {\n              useGetAllProductsQuery,\n              useGetProductByIdQuery,\n              useLoginUserMutation,\n              useRegisterUserMutation,\n              useGetProfileQuery,\n              useUpdateProfileMutation,\n              useCreateOrderMutation,\n              useGetOrderByIdQuery,\n              useInitiatePaymentMutation,\n              useVerifyPaymentMutation,\n              useGetMyOrdersQuery,\n              useGetAllOrdersQuery,\n              useGetUsersQuery,\n              useDeleteUserMutation,\n              useGetUserByIdQuery,\n              useDeleteProductMutation,\n              useUpdateUserByIdMutation,\n              useCreateProductMutation,\n              useUpdateProductMutation,\n              useUploadMutation,\n              useUpdateOrderToPaidMutation,\n              useUpdateOrderToDeliverMutation,\n              useCreateProductReviewsMutation\n                      } = api","/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/AllOrders.js",["232","233","234","235","236","237"],[],"import React, { useState, useEffect } from 'react'\nimport { Table, Form, Button, Row, Col,Container } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport Message from '../screens/Message'\nimport Loader from '../screens/Loader'\nimport { useGetAllOrdersQuery } from '../app/api'\nimport { useNavigate } from 'react-router-dom';\n\nconst AllOrders = ({ location, history }) => {\n//   const [name, setName] = useState('')\n//   const [email, setEmail] = useState('')\n//   const [password, setPassword] = useState('')\n//   const [confirmPassword, setConfirmPassword] = useState('')\n//   const [message, setMessage] = useState(null)\n \n//   const {refetch} = useGetMyOrdersQuery();\n//   let updateResponse;\n\n//   const navigate = useNavigate();\n//   let userInfo;\n//   useEffect(() => {\n//   if (localStorage.getItem('userInfo') === null) {\n//         navigate('/login')\n//   }\n//   else{\n//     userInfo=JSON.parse(localStorage.getItem('userInfo'))\n//     setName(userInfo.name)\n//     setEmail(userInfo.email)\n//     refetch();\n//   }\n\n// },[userInfo])\n\n\n// const {refetch} = useGetMyOrdersQuery();\n//   const orderListMy = useSelector((state) => state.orderListMy)\n//   const {data,isLoading,error,isSuccess,isError}=useGetProfileQuery();\n//   isSuccess && console.log(data)\n//   isError && console.log(\"error\")\n//   const myordersresponse=useGetMyOrdersQuery();\n//   console.log(myordersresponse.data)\n//   const[updateUser,updateUserResponse]=useUpdateProfileMutation();\n\n//   updateUserResponse.isError && console.log(updateUserResponse.error)\n\n// isSuccess && console.log(\"success\",data)\n\n//   useEffect(() => {\n//     if (!userInfo) {\n//       history.push('/login')\n//     } else {\n//       if (!user || !user.name || success) {\n//         dispatch({ type: USER_UPDATE_PROFILE_RESET })\n//         dispatch(getUserDetails('profile'))\n//         dispatch(listMyOrders())\n//       } else {\n//         setName(user.name)\n//         setEmail(user.email)\n//       }\n//     }\n//   }, [dispatch, history, userInfo, user, success])\n//   const submitHandler = async (e) => {\n//     e.preventDefault()\n//     if (password !== confirmPassword) {\n//       setMessage('Passwords do not match')\n//     } else {\n//       const formData={name,email,password}\n//       updateResponse=await updateUser(formData);\n//       console.log(\"update\",updateUserResponse.data)\n//     }\n//   }\n\n//   if(updateUserResponse.isSuccess){\n//     localStorage.setItem('userInfo',JSON.stringify(updateUserResponse.data))\n//     navigate(0)\n//     }\n\n\n  // let changeEmail=(e)=>{\n    // console.log(\"mail\",email)\n  // }\n\n\n    const {data,isLoading,error,isSuccess,isError}=useGetAllOrdersQuery();\n\n  return (\n    <Container>\n    <Row>\n      <Col md={12}>\n        <h2>My Orders</h2>\n         {isLoading ? (\n          <Loader />\n        ) : error ? (\n          <Message variant='danger'>{error.data.message}</Message>\n        ) : (\n          <Table striped bordered hover responsive className='table-sm'>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>USER</th>\n                <th>DATE</th>\n                <th>TOTAL</th>\n                <th>PAID</th>\n                <th>DELIVERED</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {console.log(data)}\n              {data.map((order) => (\n                <tr key={order._id}>\n                  <td>{order._id}</td>\n                  <td>{order.user && order.user.name}</td>\n                  <td>{order.createdAt.substring(0, 10)}</td>\n                  <td>{order.totalPrice}</td>\n                  <td>\n                    {order.isPaid ? (\n                      order.paidAt.substring(0, 10)\n                    ) : (\n                      <i className='fas fa-times' style={{ color: 'red' }}></i>\n                    )}\n                  </td>\n                  <td>\n                    {order.isDelivered ? (\n                      order.deliveredAt.substring(0, 10)\n                    ) : (\n                      <i className='fas fa-times' style={{ color: 'red' }}></i>\n                    )}\n                  </td>\n                  <td>\n                    <LinkContainer to={`/order/${order._id}`}>\n                      <Button className='btn-sm' variant='light'>\n                        Details\n                      </Button>\n                    </LinkContainer>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </Col>\n    </Row>\n    </Container>\n  )\n}\n\nexport default AllOrders","/Users/raghu/Downloads/ecomstore-master/frontend/src/app/features/slices/userSlice.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/app/features/slices/cartslice.js",["238","239","240"],[],"import { createSlice } from \"@reduxjs/toolkit\";\nimport { useGetMyOrdersQuery } from \"../../api\";\n\nconst initialState={\n    cartItems:[],\n    totalQuantity:0,\n    totalCartValue:0,\n    shippingAddress:{},\n    paymentMethod:[]\n}\n\nexport const cartSlice=createSlice({\n    name:'cart',\n    initialState,\n    reducers:{\n        addToCart:(state,action)=>{\n            // console.log(\"payload\",action.payload)\n            const newItem=action.payload;\n            const existingItem=state.cartItems.find((item)=>item.product === newItem.product)\n                    if(existingItem){\n                    existingItem.qty=newItem.qty;\n                    existingItem.itemsmultiliedbyqty=newItem.qty*newItem.price\n                    state.totalCartValue=0\n                        state.cartItems.map((item)=>{\n                            state.totalCartValue=item.itemsmultiliedbyqty+state.totalCartValue\n                        })\n                }\n                    else{\n                        newItem.itemsmultiliedbyqty=newItem.qty*newItem.price\n                        state.cartItems.push(newItem);\n                        state.totalQuantity=state.cartItems.length\n                        state.totalCartValue=0\n                        state.cartItems.map((item)=>{\n                            state.totalCartValue=item.itemsmultiliedbyqty+state.totalCartValue\n                        })\n                    }   \n                    // localStorage.setItem('cartItems',JSON.stringify(state.cartItems))\n        }, \n        removeFromCart:(state,action)=>{\n            const deleteItem=action.payload;\n            // console.log(\"delitem\",deleteItem)\n            // console.log(state.cartItems)\n            const findItem=state.cartItems.find((item)=>item.product === deleteItem.id)\n            // console.warn(\"found\",findItem)\n            if(findItem){\n                 state.cartItems = state.cartItems.filter(item => item.product !== deleteItem.id); \n                 state.totalQuantity=state.cartItems.length   \n                //  console.warn(\"Tobeminus\",state.totalCartValue)\n                 state.totalCartValue=state.totalCartValue-deleteItem.cal;\n                //  localStorage.setItem('cartItems',JSON.stringify(state.cartItems))\n            }\n            // state.cartItems.map((item)=>{\n            //     // state.totalCartValue=0\n            //     state.totalCartValue=state.totalCartValue-item.itemsmultiliedbyqty;\n            //     // console.log(total)\n            // })\n        },\n        resetCart:(state,action)=>{\n            state.cartItems=[]\n            state.totalQuantity=0\n            state.totalCartValue=0\n            state.shippingAddress={}\n            state.paymentMethod=[]\n        },\n        saveShippingAddress:(state,action)=>{\n            state.shippingAddress=action.payload\n        },\n        savePaymentMethod:(state,action)=>{\n            state.paymentMethod=action.payload\n        }\n        } \n})\n\nexport const { addToCart, removeFromCart,saveShippingAddress,savePaymentMethod,resetCart} = cartSlice.actions;\n\nexport default cartSlice.reducer;","/Users/raghu/Downloads/ecomstore-master/frontend/src/app/features/slices/productslice.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/components/Product.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/components/Loader.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/components/FormContainer.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/Message.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/components/CheckoutSteps.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/components/Rating.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/screens/Loader.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/components/brandcolor.js",[],[],"/Users/raghu/Downloads/ecomstore-master/frontend/src/components/Productcarousal.js",[],[],{"ruleId":"241","severity":1,"message":"242","line":15,"column":5,"nodeType":"243","messageId":"244","endLine":15,"endColumn":14},{"ruleId":"241","severity":1,"message":"242","line":50,"column":5,"nodeType":"243","messageId":"244","endLine":50,"endColumn":14},{"ruleId":"245","severity":1,"message":"246","line":30,"column":6,"nodeType":"247","endLine":30,"endColumn":16,"suggestions":"248"},{"ruleId":"241","severity":1,"message":"249","line":1,"column":27,"nodeType":"243","messageId":"244","endLine":1,"endColumn":36},{"ruleId":"241","severity":1,"message":"250","line":4,"column":23,"nodeType":"243","messageId":"244","endLine":4,"endColumn":34},{"ruleId":"241","severity":1,"message":"251","line":23,"column":9,"nodeType":"243","messageId":"244","endLine":23,"endColumn":17},{"ruleId":"241","severity":1,"message":"252","line":38,"column":7,"nodeType":"243","messageId":"244","endLine":38,"endColumn":10},{"ruleId":"241","severity":1,"message":"253","line":4,"column":10,"nodeType":"243","messageId":"244","endLine":4,"endColumn":21},{"ruleId":"241","severity":1,"message":"250","line":4,"column":23,"nodeType":"243","messageId":"244","endLine":4,"endColumn":34},{"ruleId":"241","severity":1,"message":"254","line":5,"column":8,"nodeType":"243","messageId":"244","endLine":5,"endColumn":15},{"ruleId":"241","severity":1,"message":"255","line":6,"column":8,"nodeType":"243","messageId":"244","endLine":6,"endColumn":14},{"ruleId":"241","severity":1,"message":"256","line":10,"column":10,"nodeType":"243","messageId":"244","endLine":10,"endColumn":19},{"ruleId":"241","severity":1,"message":"257","line":23,"column":9,"nodeType":"243","messageId":"244","endLine":23,"endColumn":17},{"ruleId":"241","severity":1,"message":"258","line":33,"column":15,"nodeType":"243","messageId":"244","endLine":33,"endColumn":24},{"ruleId":"241","severity":1,"message":"259","line":33,"column":25,"nodeType":"243","messageId":"244","endLine":33,"endColumn":35},{"ruleId":"241","severity":1,"message":"260","line":33,"column":36,"nodeType":"243","messageId":"244","endLine":33,"endColumn":41},{"ruleId":"241","severity":1,"message":"261","line":33,"column":42,"nodeType":"243","messageId":"244","endLine":33,"endColumn":49},{"ruleId":"241","severity":1,"message":"262","line":33,"column":60,"nodeType":"243","messageId":"244","endLine":33,"endColumn":67},{"ruleId":"241","severity":1,"message":"263","line":36,"column":21,"nodeType":"243","messageId":"244","endLine":36,"endColumn":39},{"ruleId":"245","severity":1,"message":"264","line":52,"column":6,"nodeType":"247","endLine":52,"endColumn":17,"suggestions":"265"},{"ruleId":"241","severity":1,"message":"266","line":63,"column":9,"nodeType":"243","messageId":"244","endLine":63,"endColumn":17},{"ruleId":"241","severity":1,"message":"257","line":21,"column":7,"nodeType":"243","messageId":"244","endLine":21,"endColumn":15},{"ruleId":"241","severity":1,"message":"267","line":24,"column":17,"nodeType":"243","messageId":"244","endLine":24,"endColumn":34},{"ruleId":"241","severity":1,"message":"268","line":25,"column":15,"nodeType":"243","messageId":"244","endLine":25,"endColumn":30},{"ruleId":"241","severity":1,"message":"269","line":26,"column":5,"nodeType":"243","messageId":"244","endLine":26,"endColumn":8},{"ruleId":"241","severity":1,"message":"270","line":7,"column":10,"nodeType":"243","messageId":"244","endLine":7,"endColumn":21},{"ruleId":"241","severity":1,"message":"258","line":27,"column":15,"nodeType":"243","messageId":"244","endLine":27,"endColumn":24},{"ruleId":"241","severity":1,"message":"271","line":31,"column":24,"nodeType":"243","messageId":"244","endLine":31,"endColumn":45},{"ruleId":"245","severity":1,"message":"272","line":76,"column":8,"nodeType":"247","endLine":76,"endColumn":19,"suggestions":"273"},{"ruleId":"274","severity":1,"message":"275","line":46,"column":49,"nodeType":"276","messageId":"277","endLine":46,"endColumn":54},{"ruleId":"278","severity":1,"message":"279","line":52,"column":15,"nodeType":"280","endLine":52,"endColumn":93},{"ruleId":"241","severity":1,"message":"249","line":1,"column":24,"nodeType":"243","messageId":"244","endLine":1,"endColumn":33},{"ruleId":"241","severity":1,"message":"255","line":5,"column":8,"nodeType":"243","messageId":"244","endLine":5,"endColumn":14},{"ruleId":"241","severity":1,"message":"281","line":6,"column":8,"nodeType":"243","messageId":"244","endLine":6,"endColumn":21},{"ruleId":"241","severity":1,"message":"270","line":7,"column":10,"nodeType":"243","messageId":"244","endLine":7,"endColumn":21},{"ruleId":"241","severity":1,"message":"282","line":7,"column":23,"nodeType":"243","messageId":"244","endLine":7,"endColumn":32},{"ruleId":"241","severity":1,"message":"283","line":19,"column":10,"nodeType":"243","messageId":"244","endLine":19,"endColumn":19},{"ruleId":"241","severity":1,"message":"284","line":22,"column":24,"nodeType":"243","messageId":"244","endLine":22,"endColumn":45},{"ruleId":"241","severity":1,"message":"257","line":14,"column":11,"nodeType":"243","messageId":"244","endLine":14,"endColumn":19},{"ruleId":"241","severity":1,"message":"285","line":47,"column":25,"nodeType":"243","messageId":"244","endLine":47,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":86,"column":19,"nodeType":"280","endLine":86,"endColumn":22},{"ruleId":"241","severity":1,"message":"288","line":19,"column":7,"nodeType":"243","messageId":"244","endLine":19,"endColumn":21},{"ruleId":"245","severity":1,"message":"289","line":28,"column":14,"nodeType":"290","endLine":28,"endColumn":58},{"ruleId":"274","severity":1,"message":"291","line":242,"column":4,"nodeType":"276","messageId":"277","endLine":242,"endColumn":17},{"ruleId":"241","severity":1,"message":"292","line":1,"column":17,"nodeType":"243","messageId":"244","endLine":1,"endColumn":25},{"ruleId":"241","severity":1,"message":"249","line":1,"column":27,"nodeType":"243","messageId":"244","endLine":1,"endColumn":36},{"ruleId":"241","severity":1,"message":"293","line":2,"column":17,"nodeType":"243","messageId":"244","endLine":2,"endColumn":21},{"ruleId":"241","severity":1,"message":"270","line":7,"column":10,"nodeType":"243","messageId":"244","endLine":7,"endColumn":21},{"ruleId":"241","severity":1,"message":"285","line":84,"column":33,"nodeType":"243","messageId":"244","endLine":84,"endColumn":42},{"ruleId":"241","severity":1,"message":"261","line":84,"column":43,"nodeType":"243","messageId":"244","endLine":84,"endColumn":50},{"ruleId":"241","severity":1,"message":"294","line":2,"column":10,"nodeType":"243","messageId":"244","endLine":2,"endColumn":29},{"ruleId":"295","severity":1,"message":"296","line":24,"column":51,"nodeType":"297","messageId":"298","endLine":24,"endColumn":53},{"ruleId":"295","severity":1,"message":"296","line":33,"column":51,"nodeType":"297","messageId":"298","endLine":33,"endColumn":53},"no-unused-vars","'persistor' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["299"],"'useEffect' is defined but never used.","'useSelector' is defined but never used.","'dispatch' is assigned a value but never used.","'res' is assigned a value but never used.","'useDispatch' is defined but never used.","'Message' is defined but never used.","'Loader' is defined but never used.","'skipToken' is defined but never used.","'navigate' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'isFetching' is assigned a value but never used.","'error' is assigned a value but never used.","'isError' is assigned a value but never used.","'refetch' is assigned a value but never used.","'updateUserResponse' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data.email', 'data.isAdmin', and 'data.name'. Either include them or remove the dependency array.",["300"],"'userInfo' is defined but never used.","'verifyPayResponse' is assigned a value but never used.","'deliverResponse' is assigned a value but never used.","'res' is defined but never used.","'useNavigate' is defined but never used.","'updateProductResponse' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data.brand', 'data.category', 'data.countInStock', 'data.description', 'data.image', 'data.name', and 'data.price'. Either include them or remove the dependency array.",["301"],"no-dupe-keys","Duplicate key 'color'.","ObjectExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'FormContainer' is defined but never used.","'useParams' is defined but never used.","'uploading' is assigned a value but never used.","'uploadProductResponse' is assigned a value but never used.","'isSuccess' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'updateResponse' is assigned a value but never used.","Assignments to the 'userInfo' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Duplicate key 'createProduct'.","'useState' is defined but never used.","'Form' is defined but never used.","'useGetMyOrdersQuery' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},{"desc":"306","fix":"307"},"Update the dependencies array to be: [navigate, redirect]",{"range":"308","text":"309"},"Update the dependencies array to be: [data.email, data.isAdmin, data.name, isSuccess]",{"range":"310","text":"311"},"Update the dependencies array to be: [data.brand, data.category, data.countInStock, data.description, data.image, data.name, data.price, isSuccess]",{"range":"312","text":"313"},[1204,1214],"[navigate, redirect]",[1492,1503],"[data.email, data.isAdmin, data.name, isSuccess]",[2272,2283],"[data.brand, data.category, data.countInStock, data.description, data.image, data.name, data.price, isSuccess]"]